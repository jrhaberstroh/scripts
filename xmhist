#!/home/jhaberstroh/anaconda/bin/python
import argparse
import numpy as np

parser = argparse.ArgumentParser()
parser.add_argument("xvg", help="xvg file to histogram")
parser.add_argument("-s", type=int, help="skip, number of data points to skip")
parser.add_argument("-H", type=int, default=8, help="header, lines to skip for header")
parser.add_argument("-b", type=float, default=0.0, help="bias, linear bias to remove")
parser.add_argument("-n", type=int, default=100, help="bins, number of bins for hist")
parser.add_argument("-o", type=str, help="out, file to write output")
parser.add_argument("-l", action="store_true", help="log, print as logarithm")
parser.add_argument("-d", action="store_true", help="density, normalize histogram")
parser.add_argument("-xlim", nargs=2, type=float, help="limits, x-limits for plot")
args = parser.parse_args()

if args.o:
    import matplotlib
    matplotlib.use("Agg")
import matplotlib.pyplot as plt 

data = np.loadtxt(args.xvg, comments='@', skiprows=args.H)
data = data[args.s:]
data = data[:, 1]
if args.xlim:
    bins = np.linspace(args.xlim[0], args.xlim[1], args.n)
    hist,bins = np.histogram(data, bins=bins, density=args.d)
else:
    hist,bins = np.histogram(data, bins=args.n, density=args.d)
bctr = bins[1:] * .5 + bins[:-1] * .5
ubhist = np.exp( np.log(hist) - bctr * args.b )
if args.l:
    plt.plot(bctr, np.log(ubhist))
else:
    plt.plot(bctr, ubhist)

if args.xlim:
    plt.xlim(args.xlim[0], args.xlim[1])
if args.o:
    plt.savefig(args.o)
    plt.clf()
else:
    plt.show()
