#!/home/jhaberstroh/anaconda/bin/python

import numpy as np
import matplotlib.pyplot as plt
import argparse


parser = argparse.ArgumentParser(description="")
parser.add_argument("xvg", nargs='+', type=str, help="XVG files to merge")
parser.add_argument("-cpt", action='store_true', help="Merge in a checkpoint-style, prioritizing values from later files")
parser.add_argument("-H", type=int, default=8, help="Number of lines to skip as header")
parser.add_argument("-out", help="File to save contiguous trajectory out")
parser.add_argument("-plot", action='store_true', help="Plot the contiguous trajectory after merging together")
args   = parser.parse_args()

datum = []
for xvgfile in args.xvg:
    data = np.loadtxt(xvgfile, comments='@', skiprows=args.H)
    datum.append(data)

new_datum=[]
for i in xrange(len(datum)-1):
    t_plus    = datum[i+1][0,0]
    ind_match = np.where(datum[i][:,0] == t_plus)
    if len(ind_match[0]) == 0:
        data_clean= datum[i][:ind_matched,:]
        # raise ValueError("No matches for combining trajectories found: index {}".format(i))
    elif len(ind_match) > 1:
        raise ValueError("Too many matches for combining trajectories found: index {}".format(i))
    else:
        try:
            ind_matched = ind_match[0]
            data_clean= datum[i][:ind_matched,:]
        except IndexError as e:
            print "error on i={}, ind_match={} of {}".format(i, ind_matched, ind_match)
            print "length of datum: {}".format(len(datum))
            print "length of ind_match: {}".format(len(ind_match))
            raise e
    new_datum.append(data_clean)

contiguous = np.concatenate(new_datum)
if args.plot:
    plt.plot(contiguous[:,0], contiguous[:,1])
    plt.show()

if not args.out is None:
    fmt='  % 10.6f  % 10.6f'
    np.savetxt(args.out, contiguous, fmt=fmt)
